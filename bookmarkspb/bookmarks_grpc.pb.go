// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bookmarks.proto

package bookmarkspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookmarksServiceClient is the client API for BookmarksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarksServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	LastAdded(ctx context.Context, in *LastAddedRequest, opts ...grpc.CallOption) (*LastAddedResponse, error)
}

type bookmarksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarksServiceClient(cc grpc.ClientConnInterface) BookmarksServiceClient {
	return &bookmarksServiceClient{cc}
}

func (c *bookmarksServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/service.BookmarksService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookmarksServiceClient) LastAdded(ctx context.Context, in *LastAddedRequest, opts ...grpc.CallOption) (*LastAddedResponse, error) {
	out := new(LastAddedResponse)
	err := c.cc.Invoke(ctx, "/service.BookmarksService/LastAdded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarksServiceServer is the server API for BookmarksService service.
// All implementations must embed UnimplementedBookmarksServiceServer
// for forward compatibility
type BookmarksServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	LastAdded(context.Context, *LastAddedRequest) (*LastAddedResponse, error)
	mustEmbedUnimplementedBookmarksServiceServer()
}

// UnimplementedBookmarksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarksServiceServer struct {
}

func (UnimplementedBookmarksServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBookmarksServiceServer) LastAdded(context.Context, *LastAddedRequest) (*LastAddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastAdded not implemented")
}
func (UnimplementedBookmarksServiceServer) mustEmbedUnimplementedBookmarksServiceServer() {}

// UnsafeBookmarksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarksServiceServer will
// result in compilation errors.
type UnsafeBookmarksServiceServer interface {
	mustEmbedUnimplementedBookmarksServiceServer()
}

func RegisterBookmarksServiceServer(s grpc.ServiceRegistrar, srv BookmarksServiceServer) {
	s.RegisterService(&BookmarksService_ServiceDesc, srv)
}

func _BookmarksService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarksServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BookmarksService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarksServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookmarksService_LastAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastAddedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarksServiceServer).LastAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BookmarksService/LastAdded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarksServiceServer).LastAdded(ctx, req.(*LastAddedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookmarksService_ServiceDesc is the grpc.ServiceDesc for BookmarksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookmarksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BookmarksService",
	HandlerType: (*BookmarksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BookmarksService_Add_Handler,
		},
		{
			MethodName: "LastAdded",
			Handler:    _BookmarksService_LastAdded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookmarks.proto",
}
